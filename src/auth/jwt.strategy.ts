// src/auth/jwt.strategy.ts

import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { UserService } from '../user/user.service';
import { ConfigService } from '@nestjs/config';

@Injectable()
// JWT —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private readonly userService: UserService,
    private readonly configService: ConfigService,
  ) {
    // /// START: –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JwtStrategy /// üëà updated
    const jwtSecret = configService.get<string>('JWT_SECRET');
    if (!jwtSecret) {
      throw new Error('JWT_SECRET not set in environment variables');
    }
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: jwtSecret, // üëà –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫–∞
    });
    // /// END ///
  }

  // /// START: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /// üëà updated
  async validate(payload: any) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ userService (–Ω–∞–ø—Ä–∏–º–µ—Ä, findOne)
    const user = await this.userService.findOne(payload.sub); // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    if (user) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }
  // /// END ///
}
